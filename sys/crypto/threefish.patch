Index: sys/crypto/threefish/amd64/threefish_512.S
===================================================================
--- sys/crypto/threefish/amd64/threefish_512.S	(nonexistent)
+++ sys/crypto/threefish/amd64/threefish_512.S	(working copy)
@@ -0,0 +1,595 @@
+/*
+ *   Copyright (c) 2017, Andrew Romanenko <melanhit@gmail.com>
+ *   All rights reserved.
+ *
+ *   Redistribution and use in source and binary forms, with or without
+ *   modification, are permitted provided that the following conditions are met:
+ *
+ *   1. Redistributions of source code must retain the above copyright notice, this
+ *      list of conditions and the following disclaimer.
+ *   2. Redistributions in binary form must reproduce the above copyright notice,
+ *      this list of conditions and the following disclaimer in the documentation
+ *      and/or other materials provided with the distribution.
+ *   3. Neither the name of the project nor the names of its contributors
+ *      may be used to endorse or promote products derived from this software
+ *      without specific prior written permission.
+ *
+ *   THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
+ *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ *   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+.text
+.file   "threefish_512.s"
+.globl  threefish_setkey
+.type   threefish_setkey, @function
+threefish_setkey:
+    pushq   %rbp
+    movq    %rsp, %rbp
+
+    pushq   %r15
+    pushq   %r14
+    pushq   %r13
+    pushq   %r12
+
+    movq      (%rsi), %r15
+    movq     8(%rsi), %r14
+    movq    16(%rsi), %r13
+    movq    24(%rsi), %r12
+    movq    32(%rsi), %r11
+    movq    40(%rsi), %r10
+    movq    48(%rsi), %r9
+    movq    56(%rsi), %r8
+
+    movabsq $0x1bd11bdaa9fc1a22, %rax
+
+    xorq    %r15, %rax
+    xorq    %r14, %rax
+    xorq    %r13, %rax
+    xorq    %r12, %rax
+    xorq    %r11, %rax
+    xorq    %r10, %rax
+    xorq    %r9,  %rax
+    xorq    %r8,  %rax
+
+    movq    $0, %rcx
+.L01:
+    movq    %r15,  (%rdi)
+    movq    %r14, 8(%rdi)
+    movq    %r13,16(%rdi)
+    movq    %r12,24(%rdi)
+    movq    %r11,32(%rdi)
+    movq    %r10,40(%rdi)
+    movq    %r9, 48(%rdi)
+    movq    %r8, 56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r14,  (%rdi)
+    movq    %r13, 8(%rdi)
+    movq    %r12,16(%rdi)
+    movq    %r11,24(%rdi)
+    movq    %r10,32(%rdi)
+    movq    %r9, 40(%rdi)
+    movq    %r8, 48(%rdi)
+    movq    %rax,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r13,  (%rdi)
+    movq    %r12, 8(%rdi)
+    movq    %r11,16(%rdi)
+    movq    %r10,24(%rdi)
+    movq    %r9, 32(%rdi)
+    movq    %r8, 40(%rdi)
+    movq    %rax,48(%rdi)
+    movq    %r15,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r12,  (%rdi)
+    movq    %r11, 8(%rdi)
+    movq    %r10,16(%rdi)
+    movq    %r9, 24(%rdi)
+    movq    %r8, 32(%rdi)
+    movq    %rax,40(%rdi)
+    movq    %r15,48(%rdi)
+    movq    %r14,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r11,  (%rdi)
+    movq    %r10, 8(%rdi)
+    movq    %r9, 16(%rdi)
+    movq    %r8, 24(%rdi)
+    movq    %rax,32(%rdi)
+    movq    %r15,40(%rdi)
+    movq    %r14,48(%rdi)
+    movq    %r13,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r10,  (%rdi)
+    movq    %r9,  8(%rdi)
+    movq    %r8, 16(%rdi)
+    movq    %rax,24(%rdi)
+    movq    %r15,32(%rdi)
+    movq    %r14,40(%rdi)
+    movq    %r13,48(%rdi)
+    movq    %r12,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r9,   (%rdi)
+    movq    %r8,  8(%rdi)
+    movq    %rax,16(%rdi)
+    movq    %r15,24(%rdi)
+    movq    %r14,32(%rdi)
+    movq    %r13,40(%rdi)
+    movq    %r12,48(%rdi)
+    movq    %r11,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %r8,   (%rdi)
+    movq    %rax, 8(%rdi)
+    movq    %r15,16(%rdi)
+    movq    %r14,24(%rdi)
+    movq    %r13,32(%rdi)
+    movq    %r12,40(%rdi)
+    movq    %r11,48(%rdi)
+    movq    %r10,56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    movq    %rax,  (%rdi)
+    movq    %r15, 8(%rdi)
+    movq    %r14,16(%rdi)
+    movq    %r13,24(%rdi)
+    movq    %r12,32(%rdi)
+    movq    %r11,40(%rdi)
+    movq    %r10,48(%rdi)
+    movq    %r9, 56(%rdi)
+    addq    %rcx,56(%rdi)
+    incq    %rcx
+    addq    $64, %rdi
+
+    cmp     $9, %rcx
+    je      .L01
+
+    /* end */
+    movq    %r15,  (%rdi)
+    movq    %r14, 8(%rdi)
+    movq    %r13,16(%rdi)
+    movq    %r12,24(%rdi)
+    movq    %r11,32(%rdi)
+    movq    %r10,40(%rdi)
+    movq    %r9, 48(%rdi)
+    movq    %r8, 56(%rdi)
+    addq    %rcx,56(%rdi)
+
+    popq    %r12
+    popq    %r13
+    popq    %r14
+    popq    %r15
+
+    popq    %rbp
+
+    ret
+.size   threefish_setkey, .-threefish_setkey
+
+.globl  threefish_encrypt
+.type   threefish_encrypt, @function
+threefish_encrypt:
+    push    %rbp
+    movq    %rsp, %rbp
+
+    pushq   %r15
+    pushq   %r14
+    pushq   %r13
+    pushq   %r12
+    pushq   %rbx
+
+    movq      (%rsi), %r15
+    movq     8(%rsi), %r14
+    movq    16(%rsi), %r13
+    movq    24(%rsi), %r12
+    movq    32(%rsi), %r11
+    movq    40(%rsi), %r10
+    movq    48(%rsi), %r9
+    movq    56(%rsi), %r8
+
+    movq      (%rcx), %rax
+    movq     8(%rcx), %rbx
+
+    movq    %rax, %rsi
+    xorq    %rbx, %rsi
+
+    mov     $0, %rcx
+.L11:
+    addq      (%rdi), %r15
+    addq     8(%rdi), %r14
+    addq    16(%rdi), %r13
+    addq    24(%rdi), %r12
+    addq    32(%rdi), %r11
+    addq    40(%rdi), %r10
+    addq    48(%rdi), %r9
+    addq    56(%rdi), %r8
+    addq    $64, %rdi
+
+    addq    %rax, %r10
+    addq    %rbx, %r9
+    xchg    %rax, %rbx
+    xchg    %rbx, %rsi
+
+    addq    %r14, %r15
+    addq    %r12, %r13
+    addq    %r10, %r11
+    addq    %r8,  %r9
+    rolq    $46,  %r14
+    rolq    $36,  %r12
+    rolq    $19,  %r10
+    rolq    $37,  %r8
+    xorq    %r15, %r14
+    xorq    %r13, %r12
+    xorq    %r11, %r10
+    xorq    %r9,  %r8
+
+    addq    %r14, %r13
+    addq    %r8,  %r11
+    addq    %r10, %r9
+    addq    %r12, %r15
+    rolq    $33,  %r14
+    rolq    $27,  %r8
+    rolq    $14,  %r10
+    rolq    $42,  %r12
+    xorq    %r13, %r14
+    xorq    %r11, %r8
+    xorq    %r9,  %r10
+    xorq    %r15, %r12
+
+    addq    %r14, %r11
+    addq    %r12, %r9
+    addq    %r10, %r15
+    addq    %r8,  %r13
+    rolq    $17,  %r14
+    rolq    $49,  %r12
+    rolq    $36,  %r10
+    rolq    $39,  %r8
+    xorq    %r11, %r14
+    xorq    %r9,  %r12
+    xorq    %r15, %r10
+    xorq    %r13, %r8
+
+    addq    %r14, %r9
+    addq    %r8,  %r15
+    addq    %r10, %r13
+    addq    %r12, %r11
+    rolq    $44,  %r14
+    rolq    $9,   %r8
+    rolq    $54,  %r10
+    rolq    $56,  %r12
+    xorq    %r9,  %r14
+    xorq    %r15, %r8
+    xorq    %r13, %r10
+    xorq    %r11, %r12
+
+    addq      (%rdi), %r15
+    addq     8(%rdi), %r14
+    addq    16(%rdi), %r13
+    addq    24(%rdi), %r12
+    addq    32(%rdi), %r11
+    addq    40(%rdi), %r10
+    addq    48(%rdi), %r9
+    addq    56(%rdi), %r8
+    addq    $64, %rdi
+    
+    addq    %rax, %r10
+    addq    %rbx, %r9
+    xchg    %rax, %rbx
+    xchg    %rbx, %rsi
+
+    addq    %r14, %r15
+    addq    %r12, %r13
+    addq    %r10, %r11
+    addq    %r8,  %r9
+    rolq    $39,  %r14
+    rolq    $30,  %r12
+    rolq    $34,  %r10
+    rolq    $24,  %r8
+    xorq    %r15, %r14
+    xorq    %r13, %r12
+    xorq    %r11, %r10
+    xorq    %r9,  %r8
+
+    addq    %r14, %r13
+    addq    %r8,  %r11
+    addq    %r10, %r9
+    addq    %r12, %r15
+    rolq    $13,  %r14
+    rolq    $50,  %r8
+    rolq    $10,  %r10
+    rolq    $17,  %r12
+    xorq    %r13, %r14
+    xorq    %r11, %r8
+    xorq    %r9,  %r10
+    xorq    %r15, %r12
+
+    addq    %r14, %r11
+    addq    %r12, %r9
+    addq    %r10, %r15
+    addq    %r8,  %r13
+    rolq    $25,  %r14
+    rolq    $29,  %r12
+    rolq    $39,  %r10
+    rolq    $43,  %r8
+    xorq    %r11, %r14
+    xorq    %r9,  %r12
+    xorq    %r15, %r10
+    xorq    %r13, %r8
+
+    addq    %r14, %r9
+    addq    %r8,  %r15
+    addq    %r10, %r13
+    addq    %r12, %r11
+    rolq    $8,   %r14
+    rolq    $35,  %r8
+    rolq    $56,  %r10
+    rolq    $22,  %r12
+    xorq    %r9,  %r14
+    xorq    %r15, %r8
+    xorq    %r13, %r10
+    xorq    %r11, %r12
+
+    inc     %rcx
+    cmp     $9, %rcx
+    jne     .L11
+
+    /* end */
+    addq      (%rdi), %r15
+    addq     8(%rdi), %r14
+    addq    16(%rdi), %r13
+    addq    24(%rdi), %r12
+    addq    32(%rdi), %r11
+    addq    40(%rdi), %r10
+    addq    48(%rdi), %r9
+    addq    56(%rdi), %r8
+    
+    addq    %rax, %r10
+    addq    %rbx, %r9
+
+    movq    %r15,   (%rdx)
+    movq    %r14,  8(%rdx)
+    movq    %r13, 16(%rdx)
+    movq    %r12, 24(%rdx)
+    movq    %r11, 32(%rdx)
+    movq    %r10, 40(%rdx)
+    movq    %r9,  48(%rdx)
+    movq    %r8,  56(%rdx)
+
+    popq    %rbx
+    popq    %r12
+    popq    %r13
+    popq    %r14
+    popq    %r15
+
+    popq    %rbp
+
+    ret
+.size   threefish_encrypt, .-threefish_encrypt
+
+.globl  threefish_decrypt
+.type   threefish_decrypt, @function
+threefish_decrypt:
+    push    %rbp
+    movq    %rsp, %rbp
+
+    pushq   %r15
+    pushq   %r14
+    pushq   %r13
+    pushq   %r12
+    pushq   %rbx
+
+    movq      (%rsi), %r15
+    movq     8(%rsi), %r14
+    movq    16(%rsi), %r13
+    movq    24(%rsi), %r12
+    movq    32(%rsi), %r11
+    movq    40(%rsi), %r10
+    movq    48(%rsi), %r9
+    movq    56(%rsi), %r8
+
+    addq    $1152, %rdi
+    subq      (%rdi), %r15
+    subq     8(%rdi), %r14
+    subq    16(%rdi), %r13
+    subq    24(%rdi), %r12
+    subq    32(%rdi), %r11
+    subq    40(%rdi), %r10
+    subq    48(%rdi), %r9
+    subq    56(%rdi), %r8
+    
+    movq      (%rcx), %rax
+    movq     8(%rcx), %rbx
+
+    movq    %rax, %rsi
+    xorq    %rbx, %rsi
+
+    subq    %rax, %r10
+    subq    %rbx, %r9
+
+    mov     $0, %rcx
+.L21:
+    xorq    %r11, %r12
+    xorq    %r13, %r10
+    xorq    %r15, %r8
+    xorq    %r9,  %r14
+    rolq    $42,  %r12
+    rolq    $8,   %r10
+    rolq    $29,  %r8
+    rolq    $56,  %r14
+    subq    %r12, %r11
+    subq    %r10, %r13
+    subq    %r8,  %r15
+    subq    %r14, %r9
+
+    xorq    %r13, %r8
+    xorq    %r15, %r10
+    xorq    %r9,  %r12
+    xorq    %r11, %r14
+    rolq    $21,  %r8
+    rolq    $25,  %r10
+    rolq    $35,  %r12
+    rolq    $39,  %r14
+    subq    %r8,  %r13
+    subq    %r10, %r15
+    subq    %r12, %r9
+    subq    %r14, %r11
+
+    xorq    %r15, %r12
+    xorq    %r9,  %r10
+    xorq    %r11, %r8
+    xorq    %r13, %r14
+    rolq    $47,  %r12
+    rolq    $54,  %r10
+    rolq    $14,  %r8
+    rolq    $51,  %r14
+    subq    %r12, %r15
+    subq    %r10, %r9
+    subq    %r8,  %r11
+    subq    %r14, %r13
+
+    xorq    %r9,  %r8
+    xorq    %r11, %r10
+    xorq    %r13, %r12
+    xorq    %r15, %r14
+    rolq    $40,  %r8
+    rolq    $30,  %r10
+    rolq    $34,  %r12
+    rolq    $25,  %r14
+    subq    %r8,  %r9
+    subq    %r10, %r11
+    subq    %r12, %r13
+    subq    %r14, %r15
+
+    subq    $64, %rdi
+    subq      (%rdi), %r15
+    subq     8(%rdi), %r14
+    subq    16(%rdi), %r13
+    subq    24(%rdi), %r12
+    subq    32(%rdi), %r11
+    subq    40(%rdi), %r10
+    subq    48(%rdi), %r9
+    subq    56(%rdi), %r8
+
+    xchg    %rsi, %rbx
+    xchg    %rbx, %rax
+    subq    %rax, %r10
+    subq    %rbx, %r9
+
+    xorq    %r11, %r12
+    xorq    %r13, %r10
+    xorq    %r15, %r8
+    xorq    %r9,  %r14
+    rolq    $8,   %r12
+    rolq    $10,  %r10
+    rolq    $55,  %r8
+    rolq    $20,  %r14
+    subq    %r12, %r11
+    subq    %r10, %r13
+    subq    %r8,  %r15
+    subq    %r14, %r9
+
+    xorq    %r13, %r8
+    xorq    %r15, %r10
+    xorq    %r9,  %r12
+    xorq    %r11, %r14
+    rolq    $25,  %r8
+    rolq    $28,  %r10
+    rolq    $15,  %r12
+    rolq    $47,  %r14
+    subq    %r8,  %r13
+    subq    %r10, %r15
+    subq    %r12, %r9
+    subq    %r14, %r11
+
+    xorq    %r15, %r12
+    xorq    %r9,  %r10
+    xorq    %r11, %r8
+    xorq    %r13, %r14
+    rolq    $22,  %r12
+    rolq    $50,  %r10
+    rolq    $37,  %r8
+    rolq    $31,  %r14
+    subq    %r12, %r15
+    subq    %r10, %r9
+    subq    %r8,  %r11
+    subq    %r14, %r13
+
+    xorq    %r9,  %r8
+    xorq    %r11, %r10
+    xorq    %r13, %r12
+    xorq    %r15, %r14
+    rolq    $27,  %r8
+    rolq    $45,  %r10
+    rolq    $28,  %r12
+    rolq    $18,  %r14
+    subq    %r8,  %r9
+    subq    %r10, %r11
+    subq    %r12, %r13
+    subq    %r14, %r15
+
+    subq    $64, %rdi
+    subq      (%rdi), %r15
+    subq     8(%rdi), %r14
+    subq    16(%rdi), %r13
+    subq    24(%rdi), %r12
+    subq    32(%rdi), %r11
+    subq    40(%rdi), %r10
+    subq    48(%rdi), %r9
+    subq    56(%rdi), %r8
+    
+    xchg    %rsi, %rbx
+    xchg    %rbx, %rax
+    subq    %rax, %r10
+    subq    %rbx, %r9
+
+    inc     %rcx
+    cmp     $9, %rcx
+    jne     .L21
+
+    /* end */
+    movq    %r15,   (%rdx)
+    movq    %r14,  8(%rdx)
+    movq    %r13, 16(%rdx)
+    movq    %r12, 24(%rdx)
+    movq    %r11, 32(%rdx)
+    movq    %r10, 40(%rdx)
+    movq    %r9,  48(%rdx)
+    movq    %r8,  56(%rdx)
+
+    popq    %rbx
+    popq    %r12
+    popq    %r13
+    popq    %r14
+    popq    %r15
+
+    popq    %rbp
+
+    ret
+.size   threefish_decrypt, .-threefish_decrypt
Index: sys/crypto/threefish/threefish.c
===================================================================
--- sys/crypto/threefish/threefish.c	(nonexistent)
+++ sys/crypto/threefish/threefish.c	(working copy)
@@ -0,0 +1,257 @@
+/*
+ *   Copyright (c) 2015-2016, Andrew Romanenko <melanhit@gmail.com>
+ *   All rights reserved.
+ *
+ *   Redistribution and use in source and binary forms, with or without
+ *   modification, are permitted provided that the following conditions are met:
+ *
+ *   1. Redistributions of source code must retain the above copyright notice, this
+ *      list of conditions and the following disclaimer.
+ *   2. Redistributions in binary form must reproduce the above copyright notice,
+ *      this list of conditions and the following disclaimer in the documentation
+ *      and/or other materials provided with the distribution.
+ *   3. Neither the name of the project nor the names of its contributors
+ *      may be used to endorse or promote products derived from this software
+ *      without specific prior written permission.
+ *
+ *   THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
+ *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ *   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "threefish.h"
+
+#define WORDS   THREEFISH_WORDS
+#define ROUNDS  (72 / 8)
+#define SKEYS   ((ROUNDS * 2) + 1)
+
+#define CONST_240   0x1bd11bdaa9fc1a22ULL
+
+#ifndef ROTL64
+#define ROTL64(x, n)  (((x) << (n)) | ((x) >> (64 - (n))))
+#endif
+
+#ifndef ROTR64
+#define ROTR64(x, n)  (((x) >> (n)) | ((x) << (64 - (n))))
+#endif
+
+#ifndef PACK64BE
+#define PACK64BE(pt)                                \
+(                                                   \
+	  ((uint64_t)(pt)[0]      )                 \
+	^ ((uint64_t)(pt)[1] <<  8)                 \
+	^ ((uint64_t)(pt)[2] << 16)                 \
+	^ ((uint64_t)(pt)[3] << 24)                 \
+	^ ((uint64_t)(pt)[4] << 32)                 \
+	^ ((uint64_t)(pt)[5] << 40)                 \
+	^ ((uint64_t)(pt)[6] << 48)                 \
+	^ ((uint64_t)(pt)[7] << 56)                 \
+)
+#endif
+
+#ifndef UNPACK64BE
+#define UNPACK64BE(ct, st)                          \
+{                                                   \
+	    (ct)[0] = (uint8_t)(st);                \
+	    (ct)[1] = (uint8_t)((st) >> 8);         \
+	    (ct)[2] = (uint8_t)((st) >> 16);        \
+	    (ct)[3] = (uint8_t)((st) >> 24);        \
+	    (ct)[4] = (uint8_t)((st) >> 32);        \
+	    (ct)[5] = (uint8_t)((st) >> 40);        \
+	    (ct)[6] = (uint8_t)((st) >> 48);        \
+	    (ct)[7] = (uint8_t)((st) >> 56);        \
+}
+#endif
+
+#define threefish_emix1(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[0] += x[1]; x[1] = ROTL64(x[1], d1) ^ x[0];           \
+    x[2] += x[3]; x[3] = ROTL64(x[3], d2) ^ x[2];           \
+    x[4] += x[5]; x[5] = ROTL64(x[5], d3) ^ x[4];           \
+    x[6] += x[7]; x[7] = ROTL64(x[7], d4) ^ x[6];           \
+}
+
+#define threefish_emix2(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[2] += x[1]; x[1] = ROTL64(x[1], d1) ^ x[2];           \
+    x[4] += x[7]; x[7] = ROTL64(x[7], d2) ^ x[4];           \
+    x[6] += x[5]; x[5] = ROTL64(x[5], d3) ^ x[6];           \
+    x[0] += x[3]; x[3] = ROTL64(x[3], d4) ^ x[0];           \
+}
+
+#define threefish_emix3(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[4] += x[1]; x[1] = ROTL64(x[1], d1) ^ x[4];           \
+    x[6] += x[3]; x[3] = ROTL64(x[3], d2) ^ x[6];           \
+    x[0] += x[5]; x[5] = ROTL64(x[5], d3) ^ x[0];           \
+    x[2] += x[7]; x[7] = ROTL64(x[7], d4) ^ x[2];           \
+}
+
+#define threefish_emix4(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[6] += x[1]; x[1] = ROTL64(x[1], d1) ^ x[6];           \
+    x[0] += x[7]; x[7] = ROTL64(x[7], d2) ^ x[0];           \
+    x[2] += x[5]; x[5] = ROTL64(x[5], d3) ^ x[2];           \
+    x[4] += x[3]; x[3] = ROTL64(x[3], d4) ^ x[4];           \
+}
+
+#define threefish_dmix1(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[3] ^= x[4]; x[3] = ROTR64(x[3], d1); x[4] -= x[3];    \
+    x[5] ^= x[2]; x[5] = ROTR64(x[5], d2); x[2] -= x[5];    \
+    x[7] ^= x[0]; x[7] = ROTR64(x[7], d3); x[0] -= x[7];    \
+    x[1] ^= x[6]; x[1] = ROTR64(x[1], d4); x[6] -= x[1];    \
+}
+
+#define threefish_dmix2(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[7] ^= x[2]; x[7] = ROTR64(x[7], d1); x[2] -= x[7];    \
+    x[5] ^= x[0]; x[5] = ROTR64(x[5], d2); x[0] -= x[5];    \
+    x[3] ^= x[6]; x[3] = ROTR64(x[3], d3); x[6] -= x[3];    \
+    x[1] ^= x[4]; x[1] = ROTR64(x[1], d4); x[4] -= x[1];    \
+}
+
+#define threefish_dmix3(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[3] ^= x[0]; x[3] = ROTR64(x[3], d1); x[0] -= x[3];    \
+    x[5] ^= x[6]; x[5] = ROTR64(x[5], d2); x[6] -= x[5];    \
+    x[7] ^= x[4]; x[7] = ROTR64(x[7], d3); x[4] -= x[7];    \
+    x[1] ^= x[2]; x[1] = ROTR64(x[1], d4); x[2] -= x[1];    \
+}
+
+#define threefish_dmix4(x, d1, d2, d3, d4)                  \
+{                                                           \
+    x[7] ^= x[6]; x[7] = ROTR64(x[7], d1); x[6] -= x[7];    \
+    x[5] ^= x[4]; x[5] = ROTR64(x[5], d2); x[4] -= x[5];    \
+    x[3] ^= x[2]; x[3] = ROTR64(x[3], d3); x[2] -= x[3];    \
+    x[1] ^= x[0]; x[1] = ROTR64(x[1], d4); x[0] -= x[1];    \
+}
+
+void threefish_setkey(threefish_ctx *ctx,
+                      const uint8_t *key,
+                      size_t __attribute__((unused)) len)
+{
+    uint64_t *k, *S;
+    size_t i, j;
+
+    k = ctx->k;
+
+    for(i = 0; i < WORDS; i++, key += 8)
+        k[i] = PACK64BE(key);
+
+    k[WORDS] = CONST_240;
+
+    for(i = 0; i < WORDS; i++)
+         k[WORDS] ^= k[i];
+
+    for(i = 0, S = ctx->S; i < SKEYS; i++, S += WORDS) {
+        for(j = 0; j < WORDS; j++)
+            S[j] = k[(i+j)%(WORDS+1)];
+
+        S[WORDS-1] += i;
+    }
+}
+
+void threefish_encrypt(threefish_ctx *ctx,
+                       const uint8_t *in_blk,
+                       uint8_t *out_blk,
+		       uint64_t *tweak)
+{
+    uint64_t s[WORDS], *S;
+    int i, j, n;
+
+    for(i = 0; i < WORDS; i++, in_blk += 8)
+        s[i] = PACK64BE(in_blk);
+
+    tweak[2] = tweak[0] ^ tweak[1];
+
+    for(i = 0, n = 0, S = ctx->S; i < ROUNDS; i++, S += WORDS) {
+        for(j = 0; j < WORDS; j++)
+            s[j] += S[j];
+
+	s[WORDS-2] += tweak[(n+1)%3];
+	s[WORDS-3] += tweak[n%3];
+	n++;
+
+        threefish_emix1(s, 46, 36, 19, 37);
+        threefish_emix2(s, 33, 27, 14, 42);
+        threefish_emix3(s, 17, 49, 36, 39);
+        threefish_emix4(s, 44,  9, 54, 56);
+
+        for(j = 0, S += WORDS; j < WORDS; j++)
+            s[j] += S[j];
+	
+	s[WORDS-2] += tweak[(n+1)%3];
+	s[WORDS-3] += tweak[n%3];
+	n++;
+
+        threefish_emix1(s, 39, 30, 34, 24);
+        threefish_emix2(s, 13, 50, 10, 17);
+        threefish_emix3(s, 25, 29, 39, 43);
+        threefish_emix4(s,  8, 35, 56, 22);
+    }
+
+    s[WORDS-2] += tweak[(n+1)%3];
+    s[WORDS-3] += tweak[n%3];
+
+    for(i = 0; i < WORDS; i++, out_blk += 8)
+        UNPACK64BE(out_blk, s[i] + S[i]);
+}
+
+void threefish_decrypt(threefish_ctx *ctx,
+                       const uint8_t *in_blk,
+                       uint8_t *out_blk,
+		       uint64_t *tweak)
+{
+    uint64_t s[WORDS], *S;
+    int i, j, n;
+
+    for(i = 0; i < WORDS; i++, in_blk += 8)
+        s[i] = PACK64BE(in_blk);
+    
+    tweak[2] = tweak[0] ^ tweak[1];
+
+    n = (SKEYS - 1);
+    S = ctx->S + (WORDS * (SKEYS - 1));
+    for(i = 0; i < WORDS; i++)
+        s[i] -= S[i];
+    
+    s[WORDS-2] -= tweak[(n+1)%3];
+    s[WORDS-3] -= tweak[n%3];
+
+    for(i = ROUNDS; i > 0; i--) {
+        threefish_dmix1(s, 22, 56, 35,  8);
+        threefish_dmix2(s, 43, 39, 29, 25);
+        threefish_dmix3(s, 17, 10, 50, 13);
+        threefish_dmix4(s, 24, 34, 30, 39);
+
+        for(j = 0, S -= WORDS; j < WORDS; j++)
+            s[j] -= S[j];
+
+	n--;
+    	s[WORDS-2] -= tweak[(n+1)%3];
+    	s[WORDS-3] -= tweak[n%3];
+
+        threefish_dmix1(s, 56, 54,  9, 44);
+        threefish_dmix2(s, 39, 36, 49, 17);
+        threefish_dmix3(s, 42, 14, 27, 33);
+        threefish_dmix4(s, 37, 19, 36, 46);
+
+        for(j = 0, S -= WORDS; j < WORDS; j++)
+            s[j] -= S[j];
+	
+	n--;
+    	s[WORDS-2] -= tweak[(n+1)%3];
+    	s[WORDS-3] -= tweak[n%3];
+    }
+
+    for(i = 0; i < WORDS; i++, out_blk += 8)
+        UNPACK64BE(out_blk, s[i]);
+}
Index: sys/crypto/threefish/threefish.h
===================================================================
--- sys/crypto/threefish/threefish.h	(nonexistent)
+++ sys/crypto/threefish/threefish.h	(working copy)
@@ -0,0 +1,53 @@
+/*
+ *   Copyright (c) 2015-2016, Andrew Romanenko <melanhit@gmail.com>
+ *   All rights reserved.
+ *
+ *   Redistribution and use in source and binary forms, with or without
+ *   modification, are permitted provided that the following conditions are met:
+ *
+ *   1. Redistributions of source code must retain the above copyright notice, this
+ *      list of conditions and the following disclaimer.
+ *   2. Redistributions in binary form must reproduce the above copyright notice,
+ *      this list of conditions and the following disclaimer in the documentation
+ *      and/or other materials provided with the distribution.
+ *   3. Neither the name of the project nor the names of its contributors
+ *      may be used to endorse or promote products derived from this software
+ *      without specific prior written permission.
+ *
+ *   THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
+ *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ *   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
+ *   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ *   (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ *   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ *   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ *   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef THREEFISH_H
+#define THREEFISH_H
+
+#ifdef _KERNEL
+#include <sys/types.h>
+#else
+#include <stdint.h>
+#endif
+
+#define THREEFISH_BLKLEN      64
+#define THREEFISH_KEYMIN      64
+#define THREEFISH_KEYMAX      64
+
+#define THREEFISH_WORDS       8
+
+typedef struct {
+    uint64_t S[THREEFISH_WORDS * 19];
+    uint64_t k[THREEFISH_WORDS + 1];
+} threefish_ctx;
+
+void threefish_setkey (threefish_ctx *, const uint8_t *, size_t);
+void threefish_encrypt(threefish_ctx *, const uint8_t *, uint8_t *, uint64_t *);
+void threefish_decrypt(threefish_ctx *, const uint8_t *, uint8_t *, uint64_t *);
+
+#endif  /* THREEFISH_H */
