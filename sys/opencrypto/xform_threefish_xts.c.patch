Index: sys/opencrypto/xform_threefish_xts.c
===================================================================
--- sys/opencrypto/xform_threefish_xts.c	(nonexistent)
+++ sys/opencrypto/xform_threefish_xts.c	(working copy)
@@ -0,0 +1,135 @@
+/*	$OpenBSD: xform.c,v 1.16 2001/08/28 12:20:43 ben Exp $	*/
+/*-
+ * The authors of this code are John Ioannidis (ji@tla.org),
+ * Angelos D. Keromytis (kermit@csd.uch.gr),
+ * Niels Provos (provos@physnet.uni-hamburg.de) and
+ * Damien Miller (djm@mindrot.org).
+ *
+ * This code was written by John Ioannidis for BSD/OS in Athens, Greece,
+ * in November 1995.
+ *
+ * Ported to OpenBSD and NetBSD, with additional transforms, in December 1996,
+ * by Angelos D. Keromytis.
+ *
+ * Additional transforms and features in 1997 and 1998 by Angelos D. Keromytis
+ * and Niels Provos.
+ *
+ * Additional features in 1999 by Angelos D. Keromytis.
+ *
+ * AES XTS implementation in 2008 by Damien Miller
+ *
+ * Copyright (C) 1995, 1996, 1997, 1998, 1999 by John Ioannidis,
+ * Angelos D. Keromytis and Niels Provos.
+ *
+ * Copyright (C) 2001, Angelos D. Keromytis.
+ *
+ * Copyright (C) 2008, Damien Miller
+ * Copyright (c) 2014 The FreeBSD Foundation
+ * All rights reserved.
+ *
+ * Portions of this software were developed by John-Mark Gurney
+ * under sponsorship of the FreeBSD Foundation and
+ * Rubicon Communications, LLC (Netgate).
+ *
+ * Permission to use, copy, and modify this software with or without fee
+ * is hereby granted, provided that this entire notice is included in
+ * all copies of any software which is or includes a copy or
+ * modification of this software.
+ * You may use this code under the GNU public license if you so wish. Please
+ * contribute changes back to the authors under this freer than GPL license
+ * so that we may further the use of strong encryption without limitations to
+ * all.
+ *
+ * THIS SOFTWARE IS BEING PROVIDED "AS IS", WITHOUT ANY EXPRESS OR
+ * IMPLIED WARRANTY. IN PARTICULAR, NONE OF THE AUTHORS MAKES ANY
+ * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE
+ * MERCHANTABILITY OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR
+ * PURPOSE.
+ */
+
+#include <sys/cdefs.h>
+__FBSDID("$FreeBSD$");
+
+#include <opencrypto/xform_enc.h>
+
+static	int threefish_xts_setkey(u_int8_t **, u_int8_t *, int);
+static	void threefish_xts_encrypt(caddr_t, u_int8_t *);
+static	void threefish_xts_decrypt(caddr_t, u_int8_t *);
+static	void threefish_xts_zerokey(u_int8_t **);
+static	void threefish_xts_reinit(caddr_t, u_int8_t *);
+
+/* Encryption instances */
+struct enc_xform enc_xform_threefish_xts = {
+	CRYPTO_THREEFISH_XTS, "Threefish-XTS",
+	THREEFISH_BLOCK_LEN, THREEFISH_BLOCK_LEN, THREEFISH_MIN_KEY, THREEFISH_MAX_KEY,
+	threefish_xts_encrypt,
+	threefish_xts_decrypt,
+	threefish_xts_setkey,
+	threefish_xts_zerokey,
+	threefish_xts_reinit
+};
+
+/*
+ * Encryption wrapper routines.
+ */
+static void
+threefish_xts_reinit(caddr_t key, u_int8_t *iv)
+{
+	struct threefish_xts_ctx *ctx = (struct threefish_xts_ctx *)key;
+
+	/* sector number */
+	bcopy(iv, &ctx->tweak[0], sizeof(ctx->tweak[0]));
+
+	/* block number */
+	ctx->tweak[1] = 0;
+}
+
+static void
+threefish_xts_crypt(struct threefish_xts_ctx *ctx, u_int8_t *data, u_int do_encrypt)
+{
+	if (do_encrypt)
+		threefish_encrypt(&ctx->st, data, data, ctx->tweak);
+	else
+		threefish_decrypt(&ctx->st, data, data, ctx->tweak);
+
+	ctx->tweak[1]++;
+}
+
+static void
+threefish_xts_encrypt(caddr_t key, u_int8_t *data)
+{
+	threefish_xts_crypt((struct threefish_xts_ctx *)key, data, 1);
+}
+
+static void
+threefish_xts_decrypt(caddr_t key, u_int8_t *data)
+{
+	threefish_xts_crypt((struct threefish_xts_ctx *)key, data, 0);
+}
+
+static int
+threefish_xts_setkey(u_int8_t **sched, u_int8_t *key, int len)
+{
+	struct threefish_xts_ctx *ctx;
+
+	if (len != 64)
+		return EINVAL;
+
+	*sched = KMALLOC(sizeof(struct threefish_xts_ctx), M_CRYPTO_DATA,
+	    M_NOWAIT | M_ZERO);
+	if (*sched == NULL)
+		return ENOMEM;
+	ctx = (struct threefish_xts_ctx *)*sched;
+
+	threefish_setkey(&ctx->st, key, len);
+
+	return 0;
+}
+
+static void
+threefish_xts_zerokey(u_int8_t **sched)
+{
+	bzero(*sched, sizeof(struct threefish_xts_ctx));
+	KFREE(*sched, M_CRYPTO_DATA);
+	*sched = NULL;
+}
